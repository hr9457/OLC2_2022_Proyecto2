













fn saludo(){
    println!("Hola mundo!!!");
    let mut a: i64 = 3;
    let mut b: i64 = 3;
    println!("la suma es : {}",a+b);
}




fn suma(n1: i64, n2: i64) -> i64{
    println!("la suma es: {}", n1+n2);
    println!("La resta es: {}", n1-n2);
    return 0;
}


fn sumaRetorno(n1: i64, n2: i64) -> i64{
    return n1+n2;
}



fn main() {
    saludo();

    let mut var1 = 6;
    suma(var1 - 2,3);
    println!("despues de la funcion suma");

    let mut var1 = 6;
    println!("{}",sumaRetorno(var1 - 2,3));
    println!("despues de la funcion suma");
}



















fn main(){
    // paso 1    
    struct Carro {
        placa : String,
        color : String
    }

    // paso 2 construir un struct
    // paso 3 guardar en una variable

    let mut c1 = Carro {placa:"090pl0", color:"gris"};
    println!("{}", c1.placa);
    println!("{}", c1.color);

    c1.placa = "NUEVA PLACA";
    c1.color = "cafe".to_string(); 
    println!("{}", c1.placa);
    println!("{}", c1.color);
}












fn main(){
    // si lo crea 
    // creacion de los modelos de los struct

    struct Carro{
        motor: String,
        cilindraje: i64
    }

    struct Persona{
        nombre: String,
        anios: i64,
        carro_: Carro
    }


    //asignacion 
    // = bildStruct 


    let mut persona = Persona{
        nombre: "Mike".to_string(),
        anios: 15,
        carro_: Carro {
            motor: "Grande".to_string(),
            cilindraje: 1500
        }
    };


    let mut c1 : Carro = Carro{motor: "Grande".to_string(),cilindraje: 1500};


    println!("{}", persona.nombre);
    println!("{}", persona.anios);
    println!("{}", persona.carro_.motor);
    println!("{}", persona.carro_.cilindraje);

}










struct Carro {
    nombre:String
}

fn main() {
    
    let mut c1 = Carro{ nombre: "prueba"};

    println!("{}",c1.nombre); 
    

}










fn main(){
	struct Chasis{
	    material: String
	}
	
	struct Carro{
	    marca: String,
	    modelo: String,
	    chasis: Chasis
	}
	
	struct Persona{
	    nombre: String,
	    anios: i64,
	    carro: Carro
	}
	
	let varx = 3;
	let mut vary = 0;
	let mut varz = 1;
	while vary <= varx {
	    println!("{}",vary);
	    if true{
	        if true{
	            if true{
	                while true{
	                    println!("^:)");
	                    if varz == 3{
	                        break;
	                    }
	                    varz = varz + 1;
	                }
	            }
	        }
	    }
	    varz = 1;
	    vary = vary + 1;
	}
	
	let mut persona = Persona{
	    nombre: "Mike".to_string(),
	    anios: 30,
	    carro: Carro{
	                marca: "Toyota".to_string(), modelo: "Tercel".to_string(), chasis: Chasis{material: "Aluminio".to_string()}
	         }
	};

	println!("{}",persona.carro.marca);
	println!("{}",persona.carro.marca);
	println!("{}",persona.carro.chasis.material);
	println!("{}",persona.carro.chasis.material);
}





















fn main() {
    let  a = [1,2,3] ;
    let mut b = [1,2,3,[6,4,[12,15]]] ;
    let mut c :[i64;2] = [1,2,3];


    println!("Antiguo valor es: {}", b[2]);
    println!("{}", b[3][1]);
    println!("{}", b[3][2][0]);


    b[2] = 33;
    b[3][1] = 100;
    println!("Nuevo valores es: {}",b[2]);
}









































struct CentroTuristico {
    nombre:String
}

struct Carro {
    placa: String,
    color: String,
    tipo: String
}

struct Personaje {
    nombre: String,
    edad: i64,
    descripcion: String,
    carro_: Carro,
    numeros : StructArr
}


fn main() {
    
    println!("*******************STRUCT CON ARRAY"); 
    
    let mut da = StructArr {
        datos: [10; 10]
    };
    
    println!(" valor {} ",da.datos);
    

}


























































// PILA
fn pila_vacia(vec: &mut Vec<i64>) -> bool {
    return (vec.len()) == 0;
}


fn apilar(capacidad: usize, vec: &mut Vec<i64>, value: i64) {
    if ((vec.len()) < capacidad) {
        vec.insert(vec.len(), value);
    } else {
        println!("La pila ha llegado a su maxima capacidad");
    }
}


fn desapilar(vec: &mut Vec<i64>) -> i64 {
    if !pila_vacia(vec) {
        return vec.remove(vec.len()-1);
    } else {
        println!("La pila no tiene elementos");
    }
    return 0;
}



// COLA
fn cola_vacia(vec: &mut Vec<i64>) -> bool {
    return vec.len() == 0;
}


fn encolar(capacidad: usize, vec: &mut Vec<i64>, value: i64) {
    if vec.len() < capacidad {
        vec.push(value);
    } else {
        println!("La cola ha llegado a su maxima capacidad");
    }
}


fn desencolar(vec: &mut Vec<i64>) -> i64 {
    if !cola_vacia(vec) {
        return vec.remove(0);
    } else {
        println!("La cola no tiene elementos");
    }
    return 0;
}


fn main() {
    let capacidad: usize = 10;
    let mut pila: Vec<i64> = Vec::with_capacity(capacidad - 2);
    let mut cola: Vec<i64> = Vec![1,2,3,4,5];

    let datos: [i64; 5] = [10,20,30,40,50];

    for dato in datos {
        apilar(capacidad,pila, dato);
    }

    println!("{}", pila);

    println!("{}", desapilar(pila));

    apilar(capacidad,pila, 100);
    apilar(capacidad,pila, 200);
    apilar(capacidad,pila, 300);



    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", desapilar(pila));
    println!("{}", pila);


    println!("Capacidad de pila");
    println!("{}", pila.capacity());
    println!("");


    encolar(capacidad,cola, 800);
    println!("{}", cola);


    println!("{}", desencolar(cola));

    encolar(capacidad,cola, 100);
    encolar(capacidad,cola, 200);
    encolar(capacidad,cola, 300);

    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));
    println!("{}", desencolar(cola));

    println!("{}", cola);
    println!("Capacidad de cola");
    println!("{}", cola.capacity());
    println!("");



    // vectores entre vectores
    let mut lista: Vec<Vec<i64>> = Vec::new();
    
    lista.push(Vec![0; 10]);
    lista.push(Vec![1; 10]);
    lista.push(Vec![2; 10]);
    lista.push(Vec![3; 10]);
    //lista.push(Vec![75,23,10,29,30,12,49,10,93]);


    println!("{}", lista);
    println!("");
    println!("{}", lista[0]);
    println!("{}", lista[1]);
    println!("{}", lista[2]);
    println!("{}", lista[3]);


    let vec = Vec!["Hola", "!", "Sale", "Este", "Semestre", "2022"];
    println!((vec.contains(&"Semestre")) || (vec.contains(&"2023")) );
    println!((vec.contains(&"Semestre")) && (vec.contains(&"2023")) );
    println!( vec.contains(&"Hola") );


}




















fn main() {

    let vec = Vec!["Hola", "!", "Sale", "Este", "Semestre", "2022"];
    println!(vec.contains(&"Semestre"));
}







fn main() {
    let mut cola: Vec<i64> = Vec![1,2,3,4,5];
}





















































ARCHIVO BASICO




fn main() {

    println!("-----------------------------------");
    println!("----ARCHIVO BASICO SALIDA EN 3D----");
    println!("-----------------------------------");
        
    
    let bo1: bool = false;
    let bol21: bool = !bo1;
    let cad1: String = "imprimir".to_string();
    let cad21: String = "cadena valida".to_string();
    let letra1: char = 'c';
    
    
    let val11 = 10 - (5 + 10 * (9 + 4 * (1 + 2 * 3)) - 8 * 3 * 6) + 5 * (2 * 2);
    let val21 = (2 * 9 * 2 * 2) - 9 - (8 - 16 + (3 * 3 - 6 * 5 - 7 - (9 + 7 * 7 * 7) + 10) - 5) + 8 - (6 - 5 * (2 * 3));
    let val31 = val11 + ((2 + val21 * 3) + 1 - ((2 * 2 * 2) - 2) * 2) - 2;
	
	
    
    let a:i64 = 100;
    let b:i64 = 100;
    let c:i64 = 7;
    let f:bool = true;
    let j:f64 = 10.0;
    let k:f64 = 10.0;
    
	
    let val1:i64 = 5;
    let resp:i64 = 5;
    let mut valorVerdadero : i64 = 100;
	
	
    let x1: i64 = 15;
	
	


    let abs1:i64 = 7-11;
    let abs2:f64 = 10.0;
    let raiz1:i64 = 9;
    let raiz2:f64 = 100.0;
    
    

    
    println!("El valor de val11 es:              {}",val11);
    println!("El valor de val21 es:              {}",val21);
    println!("El valor de val31 es:              {}",val31);
    println!("El resultado de la operación es:  {}",val31);
    println!("El valor de bo1 es:                {}",bo1);
    println!("El valor de cad1 es:               {}",cad1);
    println!("El valor de cad21 es:               {}",cad21);
    println!("El valor de letra1 es:             {}",letra1);
    println!("El valor de bol21:            {}",bol21);
    println!("");
    

    println!("");
    println!("");
    if (a > b || b < c ){
        println!(">>>>>> Esto no debería de imprimirse");
    }else{
        println!(">>>>>> Esto debería de imprimirse");
    }
    
    
    if (a == b && j == k || 14 != c) {
        println!(">>>>>> Esto debería de imprimirse");
    }else{
        println!(">>>>>> Esto no debería de imprimirse");
    }
    
    
    if((valorVerdadero == (50 + 50 + (val1 - val1))) && ! ! ! ! ! ! ! ! ! ! true) {
        println!(">>>>>> En este lugar deberia de entrar :)");
        valorVerdadero = 50;
    }
    else if (f || (valorVerdadero > 50)) && ((resp != 100) && ! ! ! ! ! f){
        println!(">>>>>> Aca no deberia de entrar :ccc");
        valorVerdadero = 70;
    }
    else{
        println!(">>>>>> Aca no deberia de entrar :cccc");
    }


    if x1 % 2 == 0 {
        println!(">>>>> numeroPar ingreso a if verdadero, {} es par",x1);
    }
    else {
        println!(">>>>> numeroPar ingreso a if falso, {} no es par",x1);
    }


    println!("");
    println!("*************PRUEBA DE NATIVAS");
    println!(" valor de b: {}",b);
    
    println!(" valor absoluto1: {}",(abs1.abs()) );
    println!(" valor absoluto2: {}",(abs2.abs()) );
    println!(" valor raiz1: {}",(raiz1 as f64).sqrt());
    println!(" valor raiz2: {}",(raiz2.sqrt()));

}











ARCHIVO INTERMEDIO


fn main() {
    let mut a: i64 = 909;

    println!("=======================================================================");
    println!("==================================IF===================================");
    println!("=======================================================================");

    if (a > 50) {
        println!("IF CORRECTO");
    }else if (a == 56) {
        println!("IF INCORRECTO");
    } else {
        println!("IF INCORRECTO");
    }

    println!("");
    println!("=======================================================================");
    println!("=============================IFs ANIDADOS==============================");
    println!("=======================================================================");
    let aux: i64 = 10;
    if aux > 0 {
        println!("PRIMER IF CORRECTO");
        if true && (aux == 1) {
            println!("SEGUNDO IF INCORRECTO");
        } else if aux > 10 {
            println!("SEGUNDO IF INCORRECTO");
        } else {
            println!("SEGUNDO IF CORRECTO");
        }
    }else if aux <= 3 {
        println!("PRIMER IF INCORRECTO");
        if true && (aux == 1) {
            println!("SEGUNDO IF INCORRECTO");
        } else if aux > 10 {
            println!("SEGUNDO IF INCORRECTO");
        } else {
            println!("SEGUNDO IF CORRECTO");
        } 
    } else if aux == a {
        println!("PRIMER IF INCORRECTO");
        if true && (aux == 1) {
            println!("SEGUNDO IF INCORRECTO");
        } else if aux > 10 {
            println!("SEGUNDO IF INCORRECTO");
        } else {
            println!("SEGUNDO IF CORRECTO");
        } 
    }

    println!("");
    println!("=======================================================================");
    println!("=================================WHILE=================================");
    println!("=======================================================================");

    let mut index: i64 = 0;

    while (index >= 0) {

        if (index == 0) {
            index = index + 100;
        } else if (index > 50) {
            index = index / 2 - 25;
        } else {
            index = (index / 2) - 1;
        } 

        println!(index);
    }

    println!("");
    println!("=======================================================================");
    println!("=============================TRANSFERENCIA=============================");
    println!("=======================================================================");

    a = -1;
    while (a < 5) {
        a = a + 1;
        if a == 3 {
            println!("a");
            continue;
        } else if a == 4 {
            println!("b");
            break;
        } 

        println!("El valor de a es: {}, ", a);
    }

    println!("Se debió imprimir");



        for i in 0..9 {

        let mut output: String = "".to_string();
        for j in 0..(10 - i) {
            output = output + " ".to_string();
        }

        for k in 0..i {
            output = output + "* ".to_string();
        }
        println!(output);

    }



}



RESPUESTA DEL ARCHIVO INTERMEDIO

=======================================================================
==================================IF===================================
=======================================================================
IF CORRECTO

=======================================================================
=============================IFs ANIDADOS==============================
=======================================================================
PRIMER IF CORRECTO
SEGUNDO IF CORRECTO

=======================================================================
=================================WHILE=================================
=======================================================================
100
25
11
4
1
-1

=======================================================================
=============================TRANSFERENCIA=============================
=======================================================================
El valor de a es: 0, 
El valor de a es: 1, 
El valor de a es: 2, 
a
b
Se debió imprimir


















fn main() {
    
    for i in 0..3 {

        println!("hola");

        for j in 0..(5 - i) {
            println!(3);
        }

    }

}







fn main() {
    
    let uno = "** ";

    uno = uno + "hola".to_string();

    println!(uno);

}







fn main() {

    for i in 0..9 {

        let mut output: String = "".to_string();
        for j in 0..(10 - i) {
            output = output + " ".to_string();
        }

        for k in 0..i {
            output = output + "* ".to_string();
        }
        println!(output);

    }

}






fn main(){
    let mut varx = 0;
    loop{
        println!(varx);
        if varx == 5{
            break;
        }
        varx = varx + 1;
    }
}







fn aritmetica(){
    let val11 = 10 - (5 + 10 * (9 + 4 * (1 + 2 * 3)) - 8 * 3 * 6) + 5 * (2 * 2);
    println!(val11);
}


fn saludo2(){
    let s = "hola2";
    println!(s);
}



fn main(){
    println!("main");
    saludo2();
    aritmetica();
}




fn saludo(){
    let s = "hola";
    println!(s);
}



fn saludo2(){
    let s = "hola2";
    println!(s);
}



fn main(){
    println!("main");
    let a = 3;
    saludo2();
}










fn sumar(a : i64, b : i64){
    println!(a);
}



fn main(){
    let a = 3;
    let b = 3;
    sumar(a,b);
}





fn sumar(a : i64, b : i64){
    return a + b;
}



fn main(){
    let a = 3;
    let b = 3;
    println!(sumar(a,b));
}